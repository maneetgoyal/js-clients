{"version":3,"file":"BackgroundActionHandle.js","sourceRoot":"","sources":["../../src/BackgroundActionHandle.ts"],"names":[],"mappings":";;;AAEA,+DAA2D;AAS3D,yEAAyE;AACzE,MAAa,sBAAsB;IACjC,YAAqB,UAA4B,EAAW,MAAc,EAAW,EAAU;QAAnF;;;;mBAAS,UAAU;WAAkB;QAAE;;;;mBAAS,MAAM;WAAQ;QAAE;;;;mBAAS,EAAE;WAAQ;IAAG,CAAC;IAEnG,yEAAyE;IACzE,KAAK,CAAC,MAAM,CAAgD,OAAiB;QAC3E,OAAO,CAAC,MAAM,IAAA,wCAAkB,EAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;IAC3F,CAAC;CACF;AAPD,wDAOC","sourcesContent":["import type { GadgetConnection } from \"./GadgetConnection.js\";\nimport type { AnyActionFunction } from \"./GadgetFunctions.js\";\nimport { actionResultRunner } from \"./operationRunners.js\";\nimport type { ActionFunctionOptions } from \"./types.js\";\n\nexport type BackgroundActionResult<R = any> = {\n  id: string;\n  outcome: string | null;\n  result: R | null;\n};\n\n/** Represents a handle to a background action which has been enqueued */\nexport class BackgroundActionHandle<Action extends AnyActionFunction> {\n  constructor(readonly connection: GadgetConnection, readonly action: Action, readonly id: string) {}\n\n  /** Wait for this background action to complete and return the result. */\n  async result<Options extends ActionFunctionOptions<Action>>(options?: Options) {\n    return (await actionResultRunner(this.connection, this.id, this.action, options)).result;\n  }\n}\n"]}